import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import path from "path";
import fs from "fs";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.ts"],
  plugins: [
    {
      name: "alias-plugin",
      setup(build) {
        build.onResolve({ filter: /^@\// }, (args) => {
          const base = path.join(
            process.cwd(),
            "src",
            args.path.replace(/^@\//, "")
          );

          const candidates = [
            base,
            base + ".ts",
            base + ".tsx",
            base + ".js",
            base + ".jsx",
            path.join(base, "index.ts"),
            path.join(base, "index.tsx"),
            path.join(base, "index.js"),
            path.join(base, "index.jsx"),
          ];

          for (const c of candidates) {
            try {
              if (fs.existsSync(c)) {
                const stat = fs.statSync(c);
                if (stat.isFile()) return { path: c };
                // if it's a directory, keep searching for index files
              }
            } catch (e) {
              // ignore
            }
          }

          // fallback to the base path (esbuild may try extensions),
          // but prefer explicit .tsx for TSX files as a last resort
          return { path: base + ".tsx" };
        });
      },
    },
  ],
  bundle: true,
  jsx: "automatic",
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
  minify: prod,
});

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();
}
